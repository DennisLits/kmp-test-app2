apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'kotlinx-serialization'
sqldelight {
    WeatherDb {
        packageName = "com.fhyber.multiweather"

    }
}

/*
// Seems like OLD way?
sqldelight {
    className = "MyDatabase"
    packageName = "com.example"
    sourceSet = files("src/main/sqldelight")
    schemaOutputDirectory = file("src/main/sqldelight/migrations")
}
*/


android {

    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            // MPP libraries don't currently get this resolution automatically
            // Added so Multiplatform settings 0.2 works with debug  || HACK
            matchingFallbacks = ['release']
        }
    }


    //publishLibraryVariants("release", "debug")

}

kotlin {
    targets {

        fromPreset(presets.android, 'android')

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('SharedCode')
            }

            /*
            // This was needed at some point in SQLDelight's older versions but it add the flags itself now through its plugin
            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
            */
        }



    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "io.ktor:ktor-client:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinx_serial_version"

            //implementation "com.soywiz:klock-metadata:$klock_version"

            // currently broken on iOS as of 0.2 some weird version difference, right now hard coded london ID in app instead
            //implementation "com.russhwolf:multiplatform-settings:0.2"

        }

        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serial_version"

            implementation 'com.jakewharton.timber:timber:4.7.1'

            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

            // Maybe leave implementation in here and android app
            api "androidx.lifecycle:lifecycle-livedata:2.1.0-alpha04"
        }


        iOSMain.dependencies {
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "io.ktor:ktor-client-core-native:$ktor_version"
            implementation "io.ktor:ktor-client-json-native:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serial_version"


            implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"


        }


    }
}
if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
        final def framework = kotlin.targets.iOS.binaries.getFramework("SharedCode", mode) // Should this be sharedCode instead of SharedCode (if it matters)?

        inputs.property "mode", mode
        dependsOn framework.linkTask

        from { framework.outputFile.parentFile }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }
    tasks.build.dependsOn packForXCode
}
// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
