apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'kotlinx-serialization'
sqldelight {
    WeatherDb {
        packageName = "com.fhyber.multiweather"
    }
}
kotlin {
    targets {

        //if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('SharedCode')
            }
        }

        //}


        fromPreset(presets.jvm, 'android')

    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
            implementation "io.ktor:ktor-client:1.1.3"
            implementation "io.ktor:ktor-client-json:1.1.3"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.10.0"


        }

        androidMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "io.ktor:ktor-client-core-jvm:1.1.3"
            implementation "io.ktor:ktor-client-json-jvm:1.1.3"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"

            implementation 'com.jakewharton.timber:timber:4.7.1'

            implementation "com.squareup.sqldelight:android-driver:1.1.1"

        }


        iOSMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.1.1"
            implementation "io.ktor:ktor-client-ios:1.1.3"
            implementation "io.ktor:ktor-client-core-native:1.1.3"
            implementation "io.ktor:ktor-client-json-native:1.1.3"

            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.10.0"



            implementation "com.squareup.sqldelight:ios-driver:1.1.1"
            // You'll also need to have SQLite linked via -lsqlite3 during compilation.
            // THIS IS CODE ADDED INTO THE PRESET BLOCK OR LOWER
        }


    }
}
if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
        final def framework = kotlin.targets.iOS.binaries.getFramework("SharedCode", mode)

        inputs.property "mode", mode
        dependsOn framework.linkTask

        from { framework.outputFile.parentFile }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }
    tasks.build.dependsOn packForXCode
}
// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

dependencies {
}